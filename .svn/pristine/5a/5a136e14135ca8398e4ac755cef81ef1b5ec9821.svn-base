package com.xzy.base.server.db;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisPubSub;

import com.xzy.base.server.pool.BasicTask;
import com.xzy.base.server.pool.ThreadPoolInfo;
import com.xzy.base.server.pool.ThreadPoolServer;
import com.xzy.base_c.BasicServer;

/**
 * @author edmund
 * 用户Redis连接和操作的服务
 */
public class RedisServer extends BasicServer {
	private static RedisServer singleInstance = null;
	public static RedisServer getSingleInstance(){
		if(singleInstance == null){
			synchronized(RedisServer.class){
				if(singleInstance == null){
					singleInstance = new RedisServer();
				}
			}
		}
		return singleInstance;
	}

	//单机版本的Redis池
	private JedisPool singlePool = null;
	//Redis集群池
	private JedisCluster clusterPool = null;
	private int defaultDbIndex = -1;
	

	private JedisObserver jedisObserver = null;
	private String redisDataListenerPoolName = null;
	
	@Override
	public boolean startServer() {
		JedisPoolConfig config = new JedisPoolConfig();
		
		String tempStr;
		tempStr = this.getStringPara("maxActive");
		if(tempStr != null && tempStr.trim().length() > 0){
			config.setMaxTotal(Integer.parseInt(tempStr));
		}
		tempStr = this.getStringPara("maxIdle");
		if(tempStr != null && tempStr.trim().length() > 0){
			config.setMaxIdle(Integer.parseInt(tempStr.trim()));
		}
		tempStr = this.getStringPara("minIdle");
		if(tempStr != null && tempStr.trim().length() > 0){
			config.setMinIdle(Integer.parseInt(tempStr.trim()));
		}
		tempStr = this.getStringPara("maxWait");//单位秒
		if(tempStr != null && tempStr.trim().length() > 0){
			config.setMaxWaitMillis(Integer.parseInt(tempStr)*1000);
		}
		tempStr = this.getStringPara("testOnBorrow");
		if(tempStr != null && tempStr.trim().length() > 0){
			config.setTestOnBorrow(Boolean.parseBoolean(tempStr.trim()));
		}
		tempStr = this.getStringPara("testWhileIdle");
		if(tempStr != null && tempStr.trim().length() > 0){
			config.setTestWhileIdle(!tempStr.trim().equals("false"));
		}
		tempStr = this.getStringPara("default_db_index");
		if(tempStr != null && tempStr.trim().length() > 0){
			this.defaultDbIndex = Integer.parseInt(tempStr.trim());
		}

		int timeout = 60000;
		if(this.getIntegerPara("timeout")!=null){
			timeout = this.getIntegerPara("timeout").intValue();
		}
		String passwd = this.getStringPara("passwd");

		Object obj = this.getPara("node");
		if(obj == null){
			return false;
		}
		
		String[] arr = null;
		if (obj instanceof String) {
			arr = obj.toString().split(":");
			this.singlePool = new JedisPool(config,arr[0],Integer.parseInt(arr[1]),timeout, passwd);
		}else{
			Set<HostAndPort> nodes = new HashSet<HostAndPort>();
			for (Iterator itr = ((List)obj).iterator(); itr.hasNext();) {
				tempStr = itr.next().toString();
				arr = tempStr.split(":");
				nodes.add(new HostAndPort(arr[0], Integer.parseInt(arr[1])));
			}

			this.clusterPool = new JedisCluster(nodes, timeout, 3, config);
		}
	
		this.redisDataListenerPoolName = this.getServerName()+"-redisListener";
		ThreadPoolInfo poolInfo = new ThreadPoolInfo(1);
		this.isRun = ThreadPoolServer.getSingleInstance().createThreadPool(this.redisDataListenerPoolName, poolInfo);
		ThreadPoolServer.getSingleInstance().addTask2ThreadPool(this.redisDataListenerPoolName, this.jedisObserver = new JedisObserver());
		
		return this.isRunning();
	}
	
	public void stopServer(){
		super.stopServer();
		
		ThreadPoolServer.getSingleInstance().removeThreadPool(this.redisDataListenerPoolName);
		if(this.singlePool != null){
			this.singlePool.close();
		}
		this.singlePool = null;
		if(this.clusterPool != null){
			try {
				this.clusterPool.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		this.clusterPool = null;
	}

	/**
	 * 得到一个hmap的所有field
	 * @param key 对应的key
	 * @return
	 */
	public Map<String, String> hgetAll(String key){
		return this.hgetAll(key,this.defaultDbIndex);
	}
	public Map<String, String> hgetAll(String key,int dbIndex){
		if(!this.isRunning()){
			return null;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				return jedis.jedis.hgetAll(key);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			return this.clusterPool.hgetAll(key);
		}
		
		return null;
	}

	public String setValue(String key,String value){
		return this.setValue(key, value, 0, this.defaultDbIndex);
	}
	public String setValue(String key,String value,Date expiredTime){
		return this.setValue(key, value, expiredTime,this.defaultDbIndex);
	}
	public String setValue(String key,String value,Date expiredTime,int dbIndex){
		long duration = 0;
		if(expiredTime != null){
			duration = (expiredTime.getTime()-System.currentTimeMillis())/1000;
		}
		return this.setValue(key, value, (int)duration, dbIndex);
	}

	public String setValue(String key,String value,int existDurationWithSeconds){
		return this.setValue(key, value, existDurationWithSeconds, this.defaultDbIndex);
	}

	/**
	 * 设定对应key的对应value，可指明过期时长和对应的dbindex
	 * @param key
	 * @param value
	 * @param existDurationWithSeconds
	 * @param dbIndex
	 * @return
	 */
	public String setValue(String key,String value,int existDurationWithSeconds,int dbIndex){
		if(!this.isRunning()){
			return null;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				String oldVal = jedis.jedis.set(key, value);
				if(existDurationWithSeconds > 0){
					jedis.jedis.expire(key, existDurationWithSeconds);
				}
				return oldVal;
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			String oldVal = this.clusterPool.set(key, value);
			if(existDurationWithSeconds > 0){
				this.clusterPool.expire(key, existDurationWithSeconds);
			}
			return oldVal;
		}
		
		return null;
	}
	
	/**
	 * 指定某个key的过期时间
	 * @param key
	 * @param existDurationWithSeconds
	 */
	public void expire(String key,int existDurationWithSeconds){
		this.expire(key, existDurationWithSeconds, this.defaultDbIndex);
	}
	public void expire(String key,int existDurationWithSeconds,int dbIndex){
		if(!this.isRunning()){
			return ;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				jedis.jedis.expire(key, existDurationWithSeconds);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			this.clusterPool.expire(key, existDurationWithSeconds);
		}
	}

	public long setnx(String key,String val){
		return this.setnx(key, val, this.defaultDbIndex);
	}
	/**
	 * 在目标key不存在时，才能设定成功，反之失败
	 * @param key
	 * @param val
	 * @param dbIndex
	 * @return 0代表设定失败 1代表设定成功
	 */
	public long setnx(String key,String val,int dbIndex){
		if(!this.isRunning()){
			return -1;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				return jedis.jedis.setnx(key, val);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			return this.clusterPool.setnx(key, val);
		}
		return -1;
	}
	

	public String getSet(String key,String val){
		return this.getSet(key, val, this.defaultDbIndex);
	}
	/**
	 * 设定新的值并返回原来的值 如果不存在原来的值，则返回null
	 * @param key
	 * @param val
	 * @param dbIndex
	 * @return
	 */
	public String getSet(String key,String val, int dbIndex){
		if(!this.isRunning()){
			return null;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				return jedis.jedis.getSet(key, val);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			return this.clusterPool.getSet(key, val);
		}
		return null;
	}

	public String getValue(String key){
		return this.getValue(key, this.defaultDbIndex);
	}
	/**
	 * 得到指定key的值
	 * @param key
	 * @param dbIndex
	 * @return
	 */
	public String getValue(String key, int dbIndex){
		if(!this.isRunning()){
			return null;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				return jedis.jedis.get(key);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			return this.clusterPool.get(key);
		}
		return null;
	}

	public void removeKey(String key){
		this.removeKey(key, this.defaultDbIndex);
	}
	/**
	 * 移除指定的key
	 * @param key
	 * @param dbIndex
	 */
	public void removeKey(String key,int dbIndex){
		if(!this.isRunning()){
			return;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				jedis.jedis.del(key);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			this.clusterPool.del(key);
		}
	}
	

	public boolean existKey(String key){
		return this.existKey(key, this.defaultDbIndex);
	}
	/**
	 * 检测是否存在key
	 * @param key
	 * @param dbIndex
	 * @return
	 */
	public boolean existKey(String key,int dbIndex){
		if(!this.isRunning()){
			return false;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				return jedis.jedis.exists(key);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			return this.clusterPool.exists(key);
		}
		return false;
	}

	public String hget(String key,String field){
		return this.hget(key, field, this.defaultDbIndex);
	}
	/**
	 * 得到hmap的field的值
	 * @param key
	 * @param field
	 * @param dbIndex
	 * @return
	 */
	public String hget(String key,String field,int dbIndex){
		if(!this.isRunning()){
			return null;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				return jedis.jedis.hget(key,field);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			return this.clusterPool.hget(key,field);
		}
		return null;
	}

	public long hset(String key,String field,String value){
		return this.hset(key, field, value, this.defaultDbIndex);
	}
	/**
	 * 设定hmap的field的值
	 * @param key
	 * @param field
	 * @param dbIndex
	 * @return
	 */
	public long hset(String key,String field,String value,int dbIndex){
		if(!this.isRunning()){
			return -1;
		}
		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(dbIndex);
				return jedis.jedis.hset(key,field,value);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			return this.clusterPool.hset(key,field,value);
		}
		return -1;
	}
	
	/**
	 * 发布对应channel的消息内容
	 * @param msg
	 * @param content
	 */
	public void publish(String msg,String content){
		if(!this.isRunning()){
			return ;
		}

		if(this.singlePool != null){
			JedisHandle jedis = null;
			try{
				jedis = this.getJedisConnection(-1);
				jedis.jedis.publish(msg, content);
			}finally{
				if(jedis != null){
					jedis.release();
				}
			}
		}else if(this.clusterPool != null){
			this.clusterPool.publish(msg, content);
		}
	}
	
	
	private Hashtable lockMapping = new Hashtable();
	/**
	 * 请求对应的锁
	 * @param guid 请求方的标识
	 * @param lockName 请求的锁名
	 * @param expireDurationSeconds 锁的过期时长
	 * @return
	 */
	public synchronized boolean requestLock(String guid,String lockName,long expireDurationSeconds){
		if(!this.isRunning()){
			return false;
		}
		
		String flag = guid+"\n"+lockName;
		if(this.lockMapping.containsKey(flag)){
			return this.activeLock(guid, lockName);
		}
		
		LockInfo lock = new LockInfo(guid,lockName,expireDurationSeconds*1000);
		
		boolean isLock = lock.request();
		if(isLock){
			lockMapping.put(flag, lock);
		}
		
		return isLock;
	}
	
	/**
	 * 激活获得的锁对象，防止过期失效
	 * @param guid
	 * @param lockName
	 * @return
	 */
	public synchronized boolean activeLock(String guid,String lockName){
		LockInfo lock = (LockInfo)this.lockMapping.get(guid+"\n"+lockName);
		if(lock != null){
			return lock.active();
		}
		return false;
	}
	
	/**
	 * 释放获得的锁对象
	 * @param guid
	 * @param lockName
	 * @return
	 */
	public synchronized boolean releaseLock(String guid,String lockName){
		LockInfo lock = (LockInfo)this.lockMapping.remove(guid+"\n"+lockName);
		if(lock != null){
			return lock.release();
		}
		return false;
	}
	
	
	private JedisHandle getJedisConnection(int dbIndex){
		if(!this.isRunning()){
			return null;
		}
		if(this.singlePool != null){
			Jedis jedis = this.singlePool.getResource();
			if(dbIndex >= 0){
				jedis.select(dbIndex);
			}
			return new JedisHandle(jedis);
		}
		return null;
	}
	
	private List<IRedisObserver> observerList = new LinkedList<IRedisObserver>();

	public void addListener(IRedisObserver observer) {
		if (!this.isRunning()) {
			return;
		}
		if (observer == null) {
			return;
		}
		
		synchronized(observerList){
			if(!observerList.contains(observer)){
				observerList.add(observer);
				this.rebuildObserver();
			}
		}
	}
	
	private synchronized void triggerMsg(String pattern, String msg,
			String content) {
		IRedisObserver observer;
		synchronized(observerList){
			for (Iterator itr = this.observerList.iterator(); itr.hasNext();) {
				observer = (IRedisObserver) itr.next();
				if (observer.isObserve(pattern)) {
					try{
						observer.msgArrived(pattern, msg, content);
					}catch(Exception e){
						e.printStackTrace();
					}
				}
			}
		}
	}

	public void removeListener(IRedisObserver observer) {
		if (!this.isRunning()) {
			return;
		}
		if (observer == null) {
			return;
		}
		
		synchronized(observerList){
			if(observerList.remove(observer)){
				this.rebuildObserver();
			}
		}
	}

	private void rebuildObserver(){
		IRedisObserver observer;
		String pattern;
		List patternList;
		ArrayList tempList = new ArrayList();
		for(Iterator itr = this.observerList.iterator();itr.hasNext();){
			observer = (IRedisObserver)itr.next();
			patternList = observer.getPatternList();
			for(Iterator itr1 = patternList.iterator();itr1.hasNext();){
				pattern = (String)itr1.next();
				if(tempList.contains(pattern)){
					continue;
				}
				tempList.add(pattern);
			}
		}
		
		this.jedisObserver.rebuild(tempList);
	}
	
	private class JedisObserver extends BasicTask{
		private JedisPubSub observer = null;
		private List patternList = null;
		
		public JedisObserver(){
			this.observer = new JedisPubSub() {
				public void onMessage(String arg0, String arg1) {
				}

				public void onPMessage(String pattern, String msg, String content) {
					RedisServer.this.triggerMsg(pattern, msg, content);
				}

				public void onPSubscribe(String arg0, int arg1) {
					RedisServer.this.info("PSubscribe:" + arg0 + " " + arg1);
				}

				public void onPUnsubscribe(String arg0, int arg1) {
					RedisServer.this.info("PUnsubscribe:" + arg0 + " " + arg1);
				}

				public void onSubscribe(String arg0, int arg1) {
					RedisServer.this.info("Subscribe:" + arg0 + " " + arg1);
				}

				public void onUnsubscribe(String arg0, int arg1) {
					RedisServer.this.info("Unsubscribe:" + arg0 + " " + arg1);
				}
			};
		}
		
		public synchronized void rebuild(List _patternList){
			StringBuffer strBuff = new StringBuffer(1024);
			strBuff.append("Rebuild Redis Listener:");
			for(Iterator itr = _patternList.iterator();itr.hasNext();){
				strBuff.append(itr.next().toString());
				strBuff.append("\n");
			}
			RedisServer.this.info(strBuff.toString());
			
			List oldPatterList = this.patternList;
			this.patternList = _patternList;
			
			if(this.observer.isSubscribed()){
				if(oldPatterList != null){
					String p;
					List opList = new LinkedList();
					for(Iterator itr = oldPatterList.iterator();itr.hasNext();){
						p = (String)itr.next();
						if(!this.patternList.contains(p)){
							opList.add(p);
						}
					}
					if(opList.size() > 0){
						String[] arr = new String[opList.size()];
						opList.toArray(arr);
						this.observer.punsubscribe(arr);
					}
					
					opList.clear();
					for(Iterator itr = this.patternList.iterator();itr.hasNext();){
						p = (String)itr.next();
						if(!oldPatterList.contains(p)){
							opList.add(p);
						}
					}
					if(opList.size() > 0){
						String[] arr = new String[opList.size()];
						opList.toArray(arr);
						this.observer.psubscribe(arr);
					}
				}
			}
			
			this.notifyAll();
		}
		
		public void run(){
			while(isRunning()){
				if(this.patternList == null || this.patternList.size() == 0){
					synchronized(this){
						try{
							this.wait(10000);
						}catch(Exception e){
							e.printStackTrace();
						}
					}
					continue;
				}
				
				Jedis jedis = null;
				
				if(RedisServer.this.singlePool != null){
					jedis = RedisServer.this.singlePool.getResource();
				}else{
					Map.Entry<String, JedisPool> entry;
					Iterator<Map.Entry<String, JedisPool>> itr = RedisServer.this.clusterPool.getClusterNodes().entrySet().iterator();
					while(itr.hasNext()){
						entry = itr.next();
						try{
							jedis = entry.getValue().getResource();
						}catch(Exception e){
							e.printStackTrace();
						}
						if(jedis != null){
							break;
						}
				}
				}
				
				if(jedis == null){
					synchronized(this){
						try{
							this.wait(5000);
						}catch(Exception e){
							e.printStackTrace();
						}
					}
					continue;
				}
				
				try{
					String[] patternArr = null;
					synchronized(this){
						if(this.patternList == null || this.patternList.size() == 0){
							continue;
						}
						List tempList = this.patternList;
						patternArr = new String[this.patternList.size()];
						this.patternList.toArray(patternArr);
					}
					jedis.psubscribe(this.observer, patternArr);
				}catch(Exception e){
					e.printStackTrace();
				}finally{
					try{
						if(this.observer.isSubscribed()){
							this.observer.punsubscribe();
						}
						if(jedis != null){
							jedis.close();
						}
					}catch(Exception e){
						e.printStackTrace();
					}
				}
				try{
					Thread.sleep(100);
				}catch(Exception e){
					e.printStackTrace();
				}
			}
		}
	}
	
	
	
	private class JedisHandle{
		public Jedis jedis = null;
		public JedisHandle(Jedis jedis){
			this.jedis = jedis;
		}
		
		public void release(){
			if(this.jedis != null){
				this.jedis.close();
			}
			this.jedis = null;
		}
		
		public void finalize() throws Throwable{
			super.finalize();
			this.release();
		}
	}
	

	private class LockInfo{
		private String guid = null;
		private String lockName = null;
		private long expireDuration = 0;
		
		public LockInfo(String guid,String lockName,long expireDuration){
			this.guid = guid;
			this.lockName = "lock_"+lockName;
			this.expireDuration = expireDuration;
		}
		
		public boolean request(){
			long expireAtTime = System.currentTimeMillis()+this.expireDuration;
			String infoStr = this.guid + "\n" + String.valueOf(expireAtTime); //锁到期时间
			
			try{
		        if (RedisServer.this.setnx(lockName, infoStr) == 1) {
		            return true;
		        }
		        String currentValueStr = RedisServer.this.getValue(lockName);
		        if(currentValueStr == null){
		        		return false;
		        }
		        String[] infoArr = currentValueStr.split("\n");
		        if (infoArr.length > 1 && Long.parseLong(infoArr[1]) < System.currentTimeMillis()) {
			        	//判断是否为空，不为空的情况下，如果被其他线程设置了值，则第二个条件判断是过不去的
			        // lock is expired
		        		String oldValueStr = RedisServer.this.getSet(lockName, infoStr);
			        //获取上一个锁到期时间，并设置现在的锁到期时间，
		        		//只有一个线程才能获取上一个线上的设置时间，因为jedis.getSet是同步的
			        if (oldValueStr != null && oldValueStr.equals(currentValueStr)) {
			        		//如过这个时候，多个线程恰好都到了这里，但是只有一个线程的设置值和当前值相同，他才有权利获取锁
			            return true;
			        }
		        }
	        }catch(Exception e){
	        		e.printStackTrace();
	        }
	        
	        return false;
		}
		
		public boolean release(){
			try{
				String tempStr = RedisServer.this.getValue(this.lockName);
				if(tempStr != null && tempStr.trim().length() > 0){
					String[] arr = tempStr.split("\n");
					if(!arr[0].equals(this.guid)){
						return false;
					}
				}else{
					return false;
				}
				RedisServer.this.removeKey(this.lockName);
			}catch(Exception e){
				e.printStackTrace();
				return false;
			}
			return true;
		}
		
		public boolean active(){
			long expireAtTime = System.currentTimeMillis()+this.expireDuration;
			String infoStr = this.guid+"\n"+String.valueOf(expireAtTime); //锁到期时间
			
			String resultStr = null;
			try{
				String tempStr = RedisServer.this.getValue(this.lockName);
				if(tempStr != null && tempStr.trim().length() > 0){
					String[] arr = tempStr.split("\n");
					if(!arr[0].equals(this.guid)){
						return false;
					}
				}else{
					return false;
				}
				
				resultStr = RedisServer.this.setValue(this.lockName, infoStr);
			}catch(Exception e){
				e.printStackTrace();
				return false;
			}
			if(resultStr == null || !resultStr.equals("OK")){
				return false;
			}
			return true;
		}
	}
}
